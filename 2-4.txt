4.3.2 通过WiiMote控制模型车
这个任务的目标是以不同的方式控制WiiMote。
以使之成为可能。
1首先，要用WiiMote上的按钮来实现控制。做法如下：
注：Pygame提供了一个时钟函数来延迟循环传递。请确保在每个主循环后添加一个小的延迟，这样你的程序仍然可以接受。


a)想办法找到WiiMote的地址和名称。然后将其作为设备输入到提供的类中。
注意：对于任务1和任务2，请编辑类wii- ikt_main，其中已经提供了一个基本框架。
B.)使用 steuerkreuz 以步数 stufenweise改变最大速度和角度，并在控制台上输出这些值。假设WiiMote被水平地握住进行控制，实现这一点是有意义的。

c)控制电机时，使用按钮1和2按之前设定的速度向前或向后移动。
d) 现在写一个方法来控制WiiMote的LED。这些应该是当前设定的速度的可视化。(4盏灯=最大，0盏灯=停止)
e) 增加一个重置按钮（如按钮-），重置当前的速度和偏移量（0，0）。


2.WiiMote内置的加速计芯片可以让你测量自己的相对位置。现在，这将被用来控制模型车。
a) 熟悉加速度计的输出，将其显示在控制台上，并在不同方向上旋转WiiMote。特别是，当你向前和向后转向（围绕Z轴旋转）和倾斜（围绕Y轴旋转）时，请尝试改变数值。
b)根据分析值，计算WiiMote在倾斜运动时的偏转角度。如有必要，请使用主屏幕按钮重新校准加速度计。
c)将计算出的角度转移到速度上。当按下B键时，电机应处于活动状态，并以计算的速度运行。使用已经创建的set_speed方法。
注意：只有当按下+键时，才可以调用加速度计数据和基于该数据的计算。
d) 为转向写一个新的线程，它与你的主程序并行运行。计算WiiMote的角度，并将其转移到模型车的偏转上。转向不需要按钮，但始终处于活动状态。因此，要确保转向动作之间有适当的延迟。
注意：你会发现控制还不是很流畅，对小动作的反应非常强烈。因此，在许多情况下，为了避免过度的波动和反应，随着时间的推移，平滑测量结果是很有用的（见移动平均）。指数平滑等数字低通滤波器适合于此目的。
这里xt是测量值，xt是使用平滑因子ω在时间t的平滑值。该系数越高，对测量值的反应越强烈、越快。如果它较小，对偏转的反应时间较长，但过渡比较平稳。
e)通过对测量值的指数平滑化来扩展已实施的控制。为平滑因子确定一个有意义的参数化，允许立即但精确的控制。 函数的形式x=α∗xn+(1-α)∗x。

3.最后，你在模型车本身上测试你的程序。关闭Raspberry Pi并取出SD卡。
a)首先检查用键盘和鼠标控制是否正常。
b) 现在将WiiMote连接到模型车上，检查按键控制和加速度计是否正常工作。请注意，必须可以随时停止模型车。